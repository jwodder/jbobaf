- Make sure that everything complies with (or at least is compatible with)
  everything listed on the "BPFK Section: Formal Morphology" page of the
  tiki!!!
- Implement the remaining features for fadgau
- Test everything to make sure it works as it's intended!
 - Test performing word splitting with variant sets of options
- Add Haddock documentation for all of the exported functions, values, & types
- Rethink how the Valsi type is structured & used
- Deal with {lujma'o} somehow
- Improve the test words in jvokatna01.txt and fendi01.txt (especially by
  making them all semantically valid)
- Make toCmevla handle emphasis by:
 - Converting all letters to lowercase when the stress is normal
 - Uppercasing everything in the nucleus of an abnormally-stressed {cmevla}
 - Somehow handling {cmevla} with more than one emphasized syllable
- Should lerfendi split "yyyy" into four separate "y"s?

NEW FEATURES
- Add functions to Valsi.hs for computing the component {rafsi}, source
  {tanru}, and {lujvo} score for {lujvo} & {lujvo cmene}.
- Make jvokatna able to split {lujvo cmene}
- Add a function for joining {rafsi} into {lujvo}
- Add a new Jvacux option Ignore_bad_ZOI_delims that causes a ZOI followed by a
  non-word string to (effectively) only quote that string
- Add a Jvacux option for treating an opening ZOI delimiter not followed by a
  space or period as invalid
- Add a function for recognizing type-3 {fu'ivla} and splitting them into
  {rafsi} & non-{rafsi}
- If fadgau detects an invalid consonant pair, should it return 'Nothing'?
- Add & implement Jvacux options for:
 - LAhOI ("{la'oi}" and "{zo'oi}"?)
 - allowing commas between consonants
 - allowing commas between a consonant and a vowel
 - prohibiting commas between vowels
 - prohibiting commas in {fu'ivla} and {cmevla}
 - restricting consonant clusters in {fu'ivla} and {cmevla} (separate options)
   to have all consonant pairs after the first be initial
 - prohibiting rising diphthongs after a consonant (with an option for only
   prohibiting/allowing them in {cmavo}?)
 - prohibiting rising diphthongs in {fu'ivla}?
 - prohibiting {cmevla} that begin with non-initial consonant pairs
 - allowing {rafsi} of the form C[iu]V?
 - allowing {rafsi} containing Y's?
 - allowing {rafsi} containing syllables with empty onsets? (e.g., "ka,e")
 - replacing the 5-letter rule with a "{ma'osmi} rule"
 - recognizing {fu'ivla rafsi}
 - prohibiting a 'y' within the first consonant cluster of a {fu'ivla}
 - allowing superfluous hyphens in {lujvo}
- Possibly make Jvacux into an Error monad as well as a Reader so that the user
  can receive information about exactly *why* something (e.g., jvokatna) failed
 - An option could then be added to Jvacux for specifying whether error
   messages should be in English or Lojban.
 - Add in a way for the xu* functions to return a reason why a word is invalid
 - This can be used to replace Maybes for denoting errors in certain functions
   (i.e., fadgau, toValsi et alii).
 - Problem: This would cause the result of a Jvacux computation to be dependent
   on whether an error occurred anywhere in the code, and so lerfendi could no
   longer return anything without processing the entirety of its input.  Could
   this possibly be solved using a ReaderT monad wrapped variously around an
   Identity and Error monad?
